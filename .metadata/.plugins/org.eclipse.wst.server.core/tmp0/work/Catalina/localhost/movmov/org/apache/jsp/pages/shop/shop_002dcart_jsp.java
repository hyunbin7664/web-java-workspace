/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-07-07 03:00:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.shop;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import kr.co.movmov.dto.CartDto;
import java.util.List;
import kr.co.movmov.vo.ShopCartItem;
import kr.co.movmov.utils.StringUtils;
import kr.co.movmov.vo.ShopItem;
import kr.co.movmov.mapper.ShopCartItemMapper;
import kr.co.movmov.vo.User;
import kr.co.movmov.utils.MybatisUtils;
import kr.co.movmov.mapper.UserMapper;

public final class shop_002dcart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/pages/mypage/modal-login.jsp", Long.valueOf(1747354838000L));
    _jspx_dependants.put("/pages/common/header.jsp", Long.valueOf(1747378225000L));
    _jspx_dependants.put("/pages/common/footer.jsp", Long.valueOf(1747020817000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(12);
    _jspx_imports_classes.add("kr.co.movmov.vo.User");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("kr.co.movmov.vo.ShopCartItem");
    _jspx_imports_classes.add("kr.co.movmov.utils.StringUtils");
    _jspx_imports_classes.add("kr.co.movmov.vo.ShopItem");
    _jspx_imports_classes.add("kr.co.movmov.utils.MybatisUtils");
    _jspx_imports_classes.add("kr.co.movmov.mapper.UserMapper");
    _jspx_imports_classes.add("kr.co.movmov.mapper.ShopCartItemMapper");
    _jspx_imports_classes.add("kr.co.movmov.dto.CartDto");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	/*
		요청 정보
			- 요청 URL
				pages/shop/shop-cart.jsp
			- 요청 파라미터
				없음
		요청처리 절차
			1. 세션에서 사용자 아이디를 획득한다.
			2. 사용자 아이디를 전달해서 장바구니 목록을 조회한다.
	*/

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\" />\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n");
      out.write("<title>장바구니</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"/movmov/resources/style/common/main.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"/movmov/resources/style/shop/cart.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\" />\n");
      out.write("<link rel=\"icon\" href=\"resources/images/common/favicon.ico\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	/*
		HttpSession에서 로그인된 정보를 조회해서
		로그인된 사용자 아이디가 조회되면 로그인된 상태다.
	*/
	User loginUser = (User) session.getAttribute("LOGIN_USER");
	

      out.write("\n");
      out.write("	<!-- 로그인 모달 포함  -->\n");
      out.write("	");
      out.write('\n');

/*
		요청 파라미터
	- redirectUrl (null 가능)
		- null 일 경우 request.getRequestURI() 로 응답 전송
	*/
	String redirectUrl = request.getParameter("redirectUrl");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\" />\n");
      out.write("<title>로그인</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"modal-background\">\n");
      out.write("		<div class=\"modal-login\">\n");
      out.write("			<span class=\"modal-close\">&times;</span>\n");
      out.write("\n");
      out.write("			<h2>로그인</h2>\n");
      out.write("\n");
      out.write("			<!-- form 태그 추가로 로그인 처리 가능 -->\n");
      out.write("			<form id=\"login-form\" action=\"/movmov/pages/mypage/login.jsp\" method=\"post\">\n");
      out.write("				<input type=\"text\" name=\"id\" placeholder=\"아이디\" id=\"login-id-field\"\n");
      out.write("					class=\"input-login\" required />\n");
      out.write("				<input type=\"password\" name=\"password\" placeholder=\"비밀번호\" id=\"login-pw-field\"\n");
      out.write("					class=\"input-login\" required />\n");
      out.write("				<input type=\"hidden\" name=\"redirectUrl\"\n");
      out.write("					value=\"");
      out.print(redirectUrl );
      out.write("\">\n");
      out.write("				<button type=\"submit\" class=\"btn-login-submit\">로그인</button>\n");
      out.write("			</form>\n");
      out.write("\n");
      out.write("			<div class=\"link-small\">\n");
      out.write("				<a href=\"#\">비밀번호를 잊으셨나요?</a>\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("			<div class=\"link-small\">\n");
      out.write("				<a href=\"/movmov/pages/mypage/register-form.jsp\">계정이 없으신가요? <strong>회원가입</strong></a>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("<header>\n");
      out.write("	<div class=\"logo\">\n");
      out.write("		<img src=\"/movmov/resources/images/common/logo-primary.png\"\n");
      out.write("			alt=\"MovMov 로고\" class=\"logo-img\">\n");
      out.write("	</div>\n");
      out.write("	<nav>\n");
      out.write("		<ul>\n");
      out.write("			<li><a href=\"/movmov/index.jsp\">홈</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/movie/movie-list.jsp\">영화</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/community/community-main.jsp\">커뮤니티</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/shop/shop-main.jsp\">Mov Commerce</a></li>\n");
      out.write("		</ul>\n");
      out.write("	</nav>\n");

	//비로그인 상태
	if (loginUser == null) {

      out.write("\n");
      out.write("		<div class=\"client\">\n");
      out.write("	     	<button type=\"button\" class=\"btn-signin\"\n");
      out.write("	     		id=\"btn-header-login\">로그인</button>\n");
      out.write("	     	<a href=\"/movmov/pages/mypage/register-form.jsp\">\n");
      out.write("	     		<button type=\"button\" class=\"btn-signin\">회원가입</button>\n");
      out.write("	     	</a>\n");
      out.write("	    </div>\n");
      out.write("	\n");

	//로그인 상태
	} else {

      out.write("\n");
      out.write("		<div class=\"client\">\n");
      out.write("		<a href=\"/movmov/pages/mypage/page.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-signin\">");
      out.print(loginUser.getNickname() );
      out.write("</button>\n");
      out.write("		</a>\n");
      out.write("		<a href=\"/movmov/pages/shop/shop-cart.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-cart\">장바구니</button>\n");
      out.write("		</a>\n");
      out.write("		<a href=\"/movmov/pages/mypage/logout.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-signin\">로그아웃</button>\n");
      out.write("		</a>\n");
      out.write("		<img src=\"/movmov/resources/images/common/default-profile.png\" id=\"profile-toggle\"\n");
      out.write("			alt=\"프로필\">\n");
      out.write("		<div class=\"profile-dropdown\" id=\"profile-dropdown\">\n");
      out.write("			<div class=\"profile-info\">\n");
      out.write("  					<img src=\"/movmov/resources/images/common/default-profile.png\" alt=\"프로필 이미지\">\n");
      out.write("				<div class=\"user-meta\">\n");
      out.write("					<strong>");
      out.print(loginUser.getNickname() );
      out.write("</strong>님\n");
      out.write("					<p>");
      out.print(loginUser.getEmail() );
      out.write("</p>\n");
      out.write("					<div class=\"actions\">\n");
      out.write("						<a href=\"/movmov/pages/mypage/page.jsp\">My Page</a> | <a href=\"/movmov/pages/cs/faq.jsp\">고객센터</a>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"balance\">\n");
      out.write("						잔여 포인트 <strong>");
      out.print(loginUser.getPoint() );
      out.write("</strong>P\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	<script src=\"/movmov/resources/script/common/toggler.js\"></script>	\n");

	}

      out.write("\n");
      out.write("</header>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n");
      out.write("<script src=\"/movmov/resources/script/common/header-login.js\"></script>\n");
      out.write("	");
      out.write('\n');

	User loginedUser = (User) session.getAttribute("LOGIN_USER");
	if (loginedUser == null) {

      out.write("\n");
      out.write("	<script type=\"text/javascript\">\n");
      out.write("		document.addEventListener(\"DOMContentLoaded\", function() {\n");
      out.write("			document.querySelector(\"#btn-header-login\")?.click();\n");
      out.write("		});\n");
      out.write("	</script>\n");

		return;
	}
	String userId = loginUser.getId();
	ShopCartItemMapper cartItemMapper = MybatisUtils.getMapper(ShopCartItemMapper.class);
	List<ShopCartItem> cartItems = cartItemMapper.getCartItemsByUserId(userId);
	CartDto cartDto = new CartDto(cartItems);
	

      out.write("\n");
      out.write("	<main>\n");
      out.write("		<div class=\"cart-container\">\n");
      out.write("		<form id=\"form-cart-items\" method=\"get\" action=\"shop-delete.jsp\">\n");
      out.write("				<div class=\"cart-toolbar\">\n");
      out.write("					<div class=\"cart-actions\">\n");
      out.write("						<button type=\"button\" onclick=\"deleteSelectedCartItems()\">선택 상품 삭제</button>\n");
      out.write("						<button type=\"button\" onclick=\"clearCart()\">장바구니 비우기</button>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"cart-header\">\n");
      out.write("					<div>\n");
      out.write("						<input type=\"checkbox\" id=\"checkbox-select-all\" checked />\n");
      out.write("					</div>\n");
      out.write("					<div>상품명</div>\n");
      out.write("					<div>판매금액</div>\n");
      out.write("					<div>수량</div>\n");
      out.write("					<div>구매금액</div>\n");
      out.write("					<div>삭제</div>\n");
      out.write("				</div>\n");
      out.write("				");

	if (cartItems.isEmpty()) {

      out.write("\n");
      out.write("			<div class=\"cart-empty\">장바구니에 담긴 상품이 없습니다</div>\n");

	} else {

      out.write('\n');

		for (ShopCartItem cartItem : cartItems) {
		

      out.write("\n");
      out.write("			<div class=\"cart-row\">\n");
      out.write("				<input type=\"hidden\" class=\"item-no\" value=\"");
      out.print(cartItem.getItem().getNo() );
      out.write("\" />\n");
      out.write("				<div>\n");
      out.write("					<input type=\"checkbox\" \n");
      out.write("					name=\"cno\" \n");
      out.write("					value=\"");
      out.print(cartItem.getNo() );
      out.write("\" checked />\n");
      out.write("				</div>\n");
      out.write("				<div style=\"display: flex; align-items: center; gap: 30px;\">\n");
      out.write("				<a href=\"shop-detail.jsp?ino=");
      out.print(cartItem.getItem().getNo() );
      out.write("\" class=\"unstyled-link\">\n");
      out.write("					<img src=\"/movmov/resources/images/shop/");
      out.print(cartItem.getItem().getImagePath() );
      out.write("\" \n");
      out.write("						alt=\"");
      out.print(cartItem.getItem().getImagePath() );
      out.write("\"> \n");
      out.write("				</a>\n");
      out.write("				<a href=\"shop-detail.jsp?ino=");
      out.print(cartItem.getItem().getNo() );
      out.write("\" class=\"unstyled-link\">\n");
      out.write("					<span>");
      out.print(cartItem.getItem().getName() );
      out.write('\n');

			if (cartItem.getOption() != null) {

      out.write("\n");
      out.write("					<br>/ 옵션 : ");
      out.print(cartItem.getOption().getOptionName() );
      out.write("\n");
      out.write("					<input type=\"hidden\" class=\"option-no\" value=\"");
      out.print(cartItem.getOption().getOptionNo() );
      out.write("\" />\n");
	
			}

      out.write("\n");
      out.write("					</span>\n");
      out.write("				</a>\n");
      out.write("				</div>\n");
      out.write("				<div>\n");
      out.write("					<span class=\"unit-price\">");
      out.print(StringUtils.commaWithNumber(cartItem.getItem().getPrice()) );
      out.write("</span>원\n");
      out.write("				</div>\n");
      out.write("				<div class=\"qty-box\">\n");
      out.write("					<button type=\"button\" class=\"btn-decrease\">-</button>\n");
      out.write("					<input type=\"text\" class=\"qty\" value=\"");
      out.print(cartItem.getQuantity() );
      out.write("\" readonly />\n");
      out.write("					<button type=\"button\" class=\"btn-increase\">+</button>\n");
      out.write("					<input type=\"hidden\" name=\"qty\" class=\"qty-hidden\" value=\"");
      out.print(cartItem.getQuantity() );
      out.write("\" />\n");
      out.write("				</div>\n");
      out.write("				<div>\n");
      out.write("					<span class=\"item-order-price\">");
      out.print(StringUtils.commaWithNumber(cartItem.getOrderPrice()) );
      out.write("</span>원\n");
      out.write("				</div>\n");
      out.write("				<div>\n");
      out.write("					<a href=\"shop-cart-delete.jsp?cno=");
      out.print(cartItem.getNo() );
      out.write("\" class=\"unstyled-link\">\n");
      out.write("						<i class=\"bi bi-cart-x\"></i>\n");
      out.write("					</a>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("			</div>\n");

		}

      out.write("\n");
      out.write("			\n");
      out.write("\n");
      out.write("			<footer class=\"cart-summary\">\n");
      out.write("				<div class=\"price-info-left\">\n");
      out.write("					상품 금액 <span id=\"total-item-price\"><strong>");
      out.print(StringUtils.commaWithNumber(cartDto.getTotalItemPrice()) );
      out.write("</strong></span> 원<i\n");
      out.write("						class=\"bi bi-plus\"></i> 예상 배송비 <span id=\"delivery-fee\"><strong>");
      out.print(StringUtils.commaWithNumber(cartDto.getDeliveryFee()) );
      out.write("</strong></span> 원\n");
      out.write("				</div>\n");
      out.write("				<div class=\"price-info-right\">\n");
      out.write("					총 예상 금액 <span id=\"total-order-price\"><strong>");
      out.print(StringUtils.commaWithNumber(cartDto.getTotalOrderPrice()) );
      out.write("</strong></span> 원\n");
      out.write("				</div>\n");
      out.write("				<div>\n");
      out.write("					<button class=\"btn-pay\" type=\"button\" onclick=\"moveToPurchase()\">구매하기</button>\n");
      out.write("				</div>\n");
      out.write("			</footer>\n");
      out.write("\n");

	} 

      out.write("\n");
      out.write("			</form>\n");
      out.write("		</div>\n");
      out.write("	</main>\n");
      out.write("\n");
      out.write("	");
      out.write("\n");
      out.write("\n");
      out.write("<footer class=\"footer\">\n");
      out.write("	<div class=\"footer-wrapper\">\n");
      out.write("		<div class=\"footer-top\">\n");
      out.write("			<p class=\"rating-info\">\n");
      out.write("				지금까지 <span class=\"rating-count\">★737,166,391</span> 개의 평가가 쌓였어요.\n");
      out.write("			</p>\n");
      out.write("			<div class=\"language-select\">\n");
      out.write("				<select>\n");
      out.write("					<option>한국어</option>\n");
      out.write("				</select>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-links\">\n");
      out.write("			<a href=\"#\">서비스 이용약관</a> <span>|</span> <a href=\"#\"><strong>개인정보\n");
      out.write("					처리방침</strong></a> <span>|</span> <a href=\"#\">회사 안내</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-contact\">\n");
      out.write("			<p>고객센터 | cs@movmov.com, 02-000-0000</p>\n");
      out.write("			<p>광고 문의 | ad-sales@movmov.com / 최신 광고 소개서</p>\n");
      out.write("			<p>\n");
      out.write("				제휴 및 대외 협력 | <a href=\"https://movmov.team/contact\" target=\"_blank\">https://movmov.team/contact</a>\n");
      out.write("			</p>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-company\">\n");
      out.write("			<p>주식회사 뭅뭅 | 대표 이응수 | 서울 종로구 율곡로10길 105 디아망 4층</p>\n");
      out.write("			<p>사업자 등록 번호 211-210-61239</p>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-bottom\">\n");
      out.write("			<span class=\"copyright\"> © Copy Right MovMov 2025 Inc. All\n");
      out.write("				rights reserved.</span>\n");
      out.write("			<div class=\"footer-socials\">\n");
      out.write("				<span><i class=\"fa-brands fa-facebook\"></i></span> <span><i\n");
      out.write("					class=\"fa-brands fa-x-twitter\"></i></span> <span><i\n");
      out.write("					class=\"fa-brands fa-instagram\"></i></span>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</footer>");
      out.write("\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script> \n");
      out.write("\n");
      out.write("	<script type=\"text/javascript\">\n");
      out.write("		// 선택 삭제 / 전체 삭제\n");
      out.write("		function deleteSelectedCartItems() {\n");
      out.write("			$(\"#form-cart-items\").trigger(\"submit\");\n");
      out.write("		}\n");
      out.write("		function clearCart() {\n");
      out.write("			window.location.href = 'shop-cart-clear.jsp';\n");
      out.write("		}\n");
      out.write("		// 전체 선택/해제 체크박스의 체크가 변경될 때 실행되는 이벤트 핸들러 등록\n");
      out.write("		$(\"#checkbox-select-all\").change(function() {\n");
      out.write("			let checkStatus = $(this).prop(\"checked\");\n");
      out.write("			$(\":checkbox[name=cno]\").prop(\"checked\", checkStatus);\n");
      out.write("			newCalculation();\n");
      out.write("		})\n");
      out.write("		// 장바구니 상품 체크가 변경됨에 따라 전체 선택/해제 체크박스 변경 이벤트 핸들러 등록\n");
      out.write("		$(\":checkbox[name=cno]\").change(function(){\n");
      out.write("			let checkboxLength = $(\":checkbox[name=cno]\").length;\n");
      out.write("			let checkedCheckboxLength = $(\":checkbox[name=cno]:checked\").length;\n");
      out.write("			$(\"#checkbox-select-all\").prop(\"checked\", checkboxLength == checkedCheckboxLength);\n");
      out.write("			newCalculation();\n");
      out.write("		});\n");
      out.write("		// 가격 계산\n");
      out.write("		function newCalculation() {\n");
      out.write("				let deliveryFee = 0;\n");
      out.write("				let totalItemPrice = 0;\n");
      out.write("				let totalOrderPrice = 0;\n");
      out.write("			$(\":checkbox[name=cno]:checked\")\n");
      out.write("			.closest(\".cart-row\")\n");
      out.write("			.find(\".item-order-price\")\n");
      out.write("			.each(function() {\n");
      out.write("				let itemPrice = parseInt($(this).text().replaceAll(\",\", \"\"));\n");
      out.write("				totalItemPrice += itemPrice;\n");
      out.write("//				console.log(itemPrice);\n");
      out.write("//				console.log(totalItemPrice);\n");
      out.write("			})\n");
      out.write("			\n");
      out.write("			if (totalItemPrice < 30000) {\n");
      out.write("				deliveryFee = 3000;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			totalOrderPrice = totalItemPrice + deliveryFee;\n");
      out.write("			$(\"#total-item-price\").text(totalItemPrice.toLocaleString());\n");
      out.write("			$(\"#delivery-fee\").text(deliveryFee.toLocaleString());\n");
      out.write("			$(\"#total-order-price\").text(totalOrderPrice.toLocaleString());\n");
      out.write("		}\n");
      out.write("		$(document).ready(function() {\n");
      out.write("		    // 수량 증가\n");
      out.write("		    $(\".btn-increase\").click(function() {\n");
      out.write("		        const row = $(this).closest(\".cart-row\");\n");
      out.write("		        let itemNo = parseInt(row.find(\".item-no\").val());\n");
      out.write("		        let optionNo = row.find(\".option-no\").val();\n");
      out.write("		        optionNo = optionNo ? parseInt(optionNo) : 0;\n");
      out.write("		        let unitPrice = parseInt(row.find(\".unit-price\").text().replaceAll(\",\", \"\"));\n");
      out.write("		        let qty = parseInt(row.find(\".qty\").val());\n");
      out.write("		        qty++;\n");
      out.write("		        let itemOrderPrice = unitPrice * qty;\n");
      out.write("		        row.find(\".qty\").val(qty);\n");
      out.write("		        row.find(\".qty-hidden\").val(qty);\n");
      out.write("		        row.find(\".item-order-price\").text(itemOrderPrice.toLocaleString());\n");
      out.write("		        updateCart(itemNo, optionNo, qty);\n");
      out.write("		        newCalculation();\n");
      out.write("		    });\n");
      out.write("		\n");
      out.write("		    // 수량 감소\n");
      out.write("		    $(\".btn-decrease\").click(function() {\n");
      out.write("		        const row = $(this).closest(\".cart-row\");\n");
      out.write("		        let itemNo = parseInt(row.find(\".item-no\").val());\n");
      out.write("		        let optionNo = row.find(\".option-no\").val();\n");
      out.write("		        optionNo = optionNo ? parseInt(optionNo) : 0;\n");
      out.write("		        let unitPrice = parseInt(row.find(\".unit-price\").text().replaceAll(\",\", \"\"));\n");
      out.write("		        let qty = parseInt(row.find(\".qty\").val());\n");
      out.write("		        if (qty > 1) {\n");
      out.write("		            qty--;\n");
      out.write("		            let itemOrderPrice = unitPrice * qty;\n");
      out.write("		            row.find(\".qty\").val(qty);\n");
      out.write("		            row.find(\".qty-hidden\").val(qty);\n");
      out.write("		            row.find(\".item-order-price\").text(itemOrderPrice.toLocaleString());\n");
      out.write("		            updateCart(itemNo, optionNo, qty);\n");
      out.write("		            newCalculation();\n");
      out.write("		        }\n");
      out.write("		    });\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("		function updateCart(itemNo, optionNo, qty) {\n");
      out.write("//			console.log(itemNo);\n");
      out.write("//			console.log(optionNo);\n");
      out.write("//			console.log(qty);\n");
      out.write("			let url = \"shop-cart-modify.jsp?ino=\" + itemNo + \"&qty=\" + qty + \"&option=\" + optionNo;\n");
      out.write("			window.location.href = url;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		function moveToPurchase() {\n");
      out.write("			if (confirm('결제 페이지로 이동하시겠습니까?')) {\n");
      out.write("				let selectedCnos = $(\":checkbox[name=cno]:checked\").map(function() {\n");
      out.write("					return $(this).val();\n");
      out.write("				}).get();\n");
      out.write("\n");
      out.write("				if (selectedCnos.length === 0) {\n");
      out.write("					alert(\"선택된 상품이 없습니다.\");\n");
      out.write("					return;\n");
      out.write("				}\n");
      out.write("\n");
      out.write("				let queryString = selectedCnos.map(cno => \"cno=\" + cno).join(\"&\");\n");
      out.write("\n");
      out.write("				window.location.href = \"../payment/payment.jsp?\" + queryString;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
