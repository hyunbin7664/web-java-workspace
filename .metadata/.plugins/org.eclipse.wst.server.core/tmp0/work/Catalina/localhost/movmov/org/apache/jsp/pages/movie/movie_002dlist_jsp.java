/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-07-07 03:01:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.movie;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import kr.co.movmov.utils.Pagination;
import kr.co.movmov.mapper.MovieGenreMapMapper;
import java.util.HashMap;
import java.util.Map;
import kr.co.movmov.utils.StringUtils;
import kr.co.movmov.vo.Genre;
import kr.co.movmov.mapper.GenreMapper;
import kr.co.movmov.vo.Review;
import kr.co.movmov.mapper.ReviewMapper;
import kr.co.movmov.vo.Movie;
import java.util.List;
import kr.co.movmov.utils.MybatisUtils;
import kr.co.movmov.mapper.MovieMapper;
import kr.co.movmov.vo.User;
import kr.co.movmov.utils.MybatisUtils;
import kr.co.movmov.mapper.UserMapper;

public final class movie_002dlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/pages/mypage/modal-login.jsp", Long.valueOf(1747354838000L));
    _jspx_dependants.put("/pages/common/header.jsp", Long.valueOf(1747378225000L));
    _jspx_dependants.put("/pages/common/footer.jsp", Long.valueOf(1747020817000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(20);
    _jspx_imports_classes.add("kr.co.movmov.vo.User");
    _jspx_imports_classes.add("kr.co.movmov.utils.StringUtils");
    _jspx_imports_classes.add("kr.co.movmov.utils.MybatisUtils");
    _jspx_imports_classes.add("kr.co.movmov.vo.Genre");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("kr.co.movmov.vo.Movie");
    _jspx_imports_classes.add("kr.co.movmov.mapper.ReviewMapper");
    _jspx_imports_classes.add("kr.co.movmov.vo.Review");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("kr.co.movmov.mapper.MovieMapper");
    _jspx_imports_classes.add("kr.co.movmov.utils.Pagination");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("kr.co.movmov.mapper.UserMapper");
    _jspx_imports_classes.add("kr.co.movmov.mapper.GenreMapper");
    _jspx_imports_classes.add("kr.co.movmov.mapper.MovieGenreMapMapper");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	// 페이지
	int pageNo = StringUtils.strToInt(request.getParameter("page"), 1);

	// 정렬조건
	String sort = request.getParameter("sort");

	// 검색조건
	String title = request.getParameter("title");
	String director = request.getParameter("director");
	String rating = request.getParameter("rating");
	int genreNo = StringUtils.strToInt(request.getParameter("genreNo"), 0);
	int year = StringUtils.strToInt(request.getParameter("year"), 0);
	int star = StringUtils.strToInt(request.getParameter("star"), 0);
	
	MovieMapper movieMapper = MybatisUtils.getMapper(MovieMapper.class);
	ReviewMapper reviewMapper = MybatisUtils.getMapper(ReviewMapper.class);
	GenreMapper genreMapper = MybatisUtils.getMapper(GenreMapper.class);
	MovieGenreMapMapper movieGenreMapMapper = MybatisUtils.getMapper(MovieGenreMapMapper.class);

	// 검색조건
	Map<String, Object> condition = new HashMap<>();
	
	if (sort != null && !sort.isEmpty()) {
		condition.put("sort", sort);
	}
	condition.put("title", title != null ? title : "");
	condition.put("director", director != null ? director : "");
	condition.put("rating", rating != null ? rating : "");
	if (genreNo != 0) condition.put("genreNo", genreNo);
	if (year != 0) condition.put("year", year);
	if (star != 0) condition.put("star", star);
	
	condition.put("offset", (pageNo - 1) * 10);
	condition.put("rows", 10);
	
	
	
	
	List<Genre> allGenres = genreMapper.getAllGenres();
	
	// 페이지네이션 객체
	int totalRows = movieMapper.getTotalRows(condition);
	Pagination pagination = new Pagination(pageNo, totalRows, 10);
	
	List<Movie> movies = movieMapper.getMovies(condition);


      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("  <title>영화 목록</title>\n");
      out.write("  <!-- Bootstrap CSS -->\n");
      out.write("  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../resources/style/movie/movie-list.css\">\n");
      out.write("  <link\n");
      out.write("   href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap\"\n");
      out.write("   rel=\"stylesheet\">\n");
      out.write("  <link rel=\"stylesheet\"\n");
      out.write("   href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\">\n");
      out.write("  <link rel=\"stylesheet\" href=\"../../resources/style/common/main.css\">\n");
      out.write("  <link rel=\"icon\" href=\"resources/images/common/favicon.ico\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("   ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	/*
		HttpSession에서 로그인된 정보를 조회해서
		로그인된 사용자 아이디가 조회되면 로그인된 상태다.
	*/
	User loginUser = (User) session.getAttribute("LOGIN_USER");
	

      out.write("\n");
      out.write("	<!-- 로그인 모달 포함  -->\n");
      out.write("	");
      out.write('\n');

/*
		요청 파라미터
	- redirectUrl (null 가능)
		- null 일 경우 request.getRequestURI() 로 응답 전송
	*/
	String redirectUrl = request.getParameter("redirectUrl");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\" />\n");
      out.write("<title>로그인</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"modal-background\">\n");
      out.write("		<div class=\"modal-login\">\n");
      out.write("			<span class=\"modal-close\">&times;</span>\n");
      out.write("\n");
      out.write("			<h2>로그인</h2>\n");
      out.write("\n");
      out.write("			<!-- form 태그 추가로 로그인 처리 가능 -->\n");
      out.write("			<form id=\"login-form\" action=\"/movmov/pages/mypage/login.jsp\" method=\"post\">\n");
      out.write("				<input type=\"text\" name=\"id\" placeholder=\"아이디\" id=\"login-id-field\"\n");
      out.write("					class=\"input-login\" required />\n");
      out.write("				<input type=\"password\" name=\"password\" placeholder=\"비밀번호\" id=\"login-pw-field\"\n");
      out.write("					class=\"input-login\" required />\n");
      out.write("				<input type=\"hidden\" name=\"redirectUrl\"\n");
      out.write("					value=\"");
      out.print(redirectUrl );
      out.write("\">\n");
      out.write("				<button type=\"submit\" class=\"btn-login-submit\">로그인</button>\n");
      out.write("			</form>\n");
      out.write("\n");
      out.write("			<div class=\"link-small\">\n");
      out.write("				<a href=\"#\">비밀번호를 잊으셨나요?</a>\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("			<div class=\"link-small\">\n");
      out.write("				<a href=\"/movmov/pages/mypage/register-form.jsp\">계정이 없으신가요? <strong>회원가입</strong></a>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("<header>\n");
      out.write("	<div class=\"logo\">\n");
      out.write("		<img src=\"/movmov/resources/images/common/logo-primary.png\"\n");
      out.write("			alt=\"MovMov 로고\" class=\"logo-img\">\n");
      out.write("	</div>\n");
      out.write("	<nav>\n");
      out.write("		<ul>\n");
      out.write("			<li><a href=\"/movmov/index.jsp\">홈</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/movie/movie-list.jsp\">영화</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/community/community-main.jsp\">커뮤니티</a></li>\n");
      out.write("			<li><a href=\"/movmov/pages/shop/shop-main.jsp\">Mov Commerce</a></li>\n");
      out.write("		</ul>\n");
      out.write("	</nav>\n");

	//비로그인 상태
	if (loginUser == null) {

      out.write("\n");
      out.write("		<div class=\"client\">\n");
      out.write("	     	<button type=\"button\" class=\"btn-signin\"\n");
      out.write("	     		id=\"btn-header-login\">로그인</button>\n");
      out.write("	     	<a href=\"/movmov/pages/mypage/register-form.jsp\">\n");
      out.write("	     		<button type=\"button\" class=\"btn-signin\">회원가입</button>\n");
      out.write("	     	</a>\n");
      out.write("	    </div>\n");
      out.write("	\n");

	//로그인 상태
	} else {

      out.write("\n");
      out.write("		<div class=\"client\">\n");
      out.write("		<a href=\"/movmov/pages/mypage/page.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-signin\">");
      out.print(loginUser.getNickname() );
      out.write("</button>\n");
      out.write("		</a>\n");
      out.write("		<a href=\"/movmov/pages/shop/shop-cart.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-cart\">장바구니</button>\n");
      out.write("		</a>\n");
      out.write("		<a href=\"/movmov/pages/mypage/logout.jsp\">\n");
      out.write("			<button type=\"button\" class=\"btn-signin\">로그아웃</button>\n");
      out.write("		</a>\n");
      out.write("		<img src=\"/movmov/resources/images/common/default-profile.png\" id=\"profile-toggle\"\n");
      out.write("			alt=\"프로필\">\n");
      out.write("		<div class=\"profile-dropdown\" id=\"profile-dropdown\">\n");
      out.write("			<div class=\"profile-info\">\n");
      out.write("  					<img src=\"/movmov/resources/images/common/default-profile.png\" alt=\"프로필 이미지\">\n");
      out.write("				<div class=\"user-meta\">\n");
      out.write("					<strong>");
      out.print(loginUser.getNickname() );
      out.write("</strong>님\n");
      out.write("					<p>");
      out.print(loginUser.getEmail() );
      out.write("</p>\n");
      out.write("					<div class=\"actions\">\n");
      out.write("						<a href=\"/movmov/pages/mypage/page.jsp\">My Page</a> | <a href=\"/movmov/pages/cs/faq.jsp\">고객센터</a>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"balance\">\n");
      out.write("						잔여 포인트 <strong>");
      out.print(loginUser.getPoint() );
      out.write("</strong>P\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	<script src=\"/movmov/resources/script/common/toggler.js\"></script>	\n");

	}

      out.write("\n");
      out.write("</header>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n");
      out.write("<script src=\"/movmov/resources/script/common/header-login.js\"></script>\n");
      out.write("	");
      out.write("\n");
      out.write("   <div class=\"search-container\">\n");
      out.write("  <form action=\"movie-list.jsp\" method=\"get\" class=\"search-form\">\n");
      out.write("    <div class=\"search-item\">\n");
      out.write("      <label for=\"movie-title\">영화제목</label>\n");
      out.write("      <input id=\"movie-title\" name=\"title\" value=\"");
      out.print(request.getParameter("title") != null ? request.getParameter("title") : "" );
      out.write("\" placeholder=\"제목\" />\n");
      out.write("    </div>\n");
      out.write("    <div class=\"search-item\">\n");
      out.write("      <label for=\"director-name\">감독명</label>\n");
      out.write("      <input id=\"director-name\" name=\"director\" value=\"");
      out.print(request.getParameter("director") != null ? request.getParameter("director") : "" );
      out.write("\" placeholder=\"감독명\" />\n");
      out.write("    </div>\n");
      out.write("    <div class=\"search-item\">\n");
      out.write("      <label for=\"genre\">장르</label>\n");
      out.write("      <select id=\"genre\" name=\"genreNo\">\n");
      out.write("        <option value=\"\">장르 선택</option>\n");

   for (Genre genre : allGenres) {

      out.write("\n");
      out.write("        <option value=\"");
      out.print(genre.getNo() );
      out.write('"');
      out.write(' ');
      out.print(genre.getNo() == StringUtils.strToInt(request.getParameter("genreNo"), 0) ? "selected" : "" );
      out.write('>');
      out.print(genre.getName() );
      out.write("</option>\n");
      out.write("\n");

   }

      out.write("     \n");
      out.write("      </select>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"search-item\">\n");
      out.write("      <label for=\"release-year\">개봉연도</label>\n");
      out.write("      <select id=\"release-year\" name=\"year\">\n");
      out.write("        <option value=\"\">연도 선택</option>\n");

   for (int i = 2000; i<2025; i++) {

      out.write("\n");
      out.write("        <option value=\"");
      out.print(i );
      out.write('"');
      out.write(' ');
      out.print(i == StringUtils.strToInt(request.getParameter("year"), 0) ? "selected" : "" );
      out.write('>');
      out.print(i );
      out.write("</option>\n");

   }

      out.write("\n");
      out.write("        <!-- 연도 옵션은 서버에서 동적으로 생성하거나 JavaScript로 추가할 수 있습니다 -->\n");
      out.write("      </select>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"search-item\">\n");
      out.write("      <label for=\"director-name\">평점</label>\n");
      out.write("      \n");
      out.write("	      <select name=\"star\">\n");
      out.write("			  <option value=\"\">평점 선택</option>\n");
      out.write("			  <option value=\"4\" ");
      out.print( "4".equals(request.getParameter("star")) ? "selected" : "" );
      out.write(">4점 이상</option>\n");
      out.write("			  <option value=\"3\" ");
      out.print( "3".equals(request.getParameter("star")) ? "selected" : "" );
      out.write(">3점 이상</option>\n");
      out.write("			  <option value=\"2\" ");
      out.print( "2".equals(request.getParameter("star")) ? "selected" : "" );
      out.write(">2점 이상</option>\n");
      out.write("			  <option value=\"1\" ");
      out.print( "1".equals(request.getParameter("star")) ? "selected" : "" );
      out.write(">1점 이상</option>\n");
      out.write("			</select>\n");
      out.write("		</div>\n");
      out.write("      <div class=\"search-item\">\n");
      out.write("      <label for=\"director-name\">상영등급</label>\n");
      out.write("      \n");
      out.write("	      <select name=\"rating\">\n");
      out.write("			  <option value=\"\">상영등급 선택</option>\n");
      out.write("			  <option value=\"전체\" ");
      out.print( "전체".equals(request.getParameter("rating")) ? "selected" : "" );
      out.write(">전체</option>\n");
      out.write("			  <option value=\"12세\" ");
      out.print( "12세".equals(request.getParameter("rating")) ? "selected" : "" );
      out.write(">12세</option>\n");
      out.write("			  <option value=\"15세\" ");
      out.print( "15세".equals(request.getParameter("rating")) ? "selected" : "" );
      out.write(">15세</option>\n");
      out.write("			  <option value=\"청불\" ");
      out.print( "청불".equals(request.getParameter("rating")) ? "selected" : "" );
      out.write(">청불</option>\n");
      out.write("			</select>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("    <button type=\"submit\" class=\"btn-search\">검색</button>\n");
      out.write("  </form>\n");
      out.write("</div>\n");
      out.write("  <div class=\"container\">\n");
      out.write("    <h1 class=\"mb-4\">영화 목록</h1>\n");
      out.write("    <form id=\"sort-form\" action=\"movie-list.jsp\" method=\"get\" onchange=\"document.getElementById('sort-form').submit();\">\n");
      out.write("    <select class=\"form-select form-select-sm mb-3\" name=\"sort\" style=\"width: 150px;\">\n");
      out.write("	  <option value=\"\">정렬 기준</option>\n");
      out.write("	  <option value=\"length-asc\" ");
      out.print( "length-asc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">상영시간 짧은 순</option>\n");
      out.write("	  <option value=\"length-desc\" ");
      out.print( "length-desc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">상영시간 긴 순</option>\n");
      out.write("	  <option value=\"star-asc\" ");
      out.print( "star-asc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">평균평점 낮은 순</option>\n");
      out.write("	  <option value=\"star-desc\" ");
      out.print( "star-desc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">평균평점 높은 순</option>\n");
      out.write("	  <option value=\"reviews\" ");
      out.print( "reviews".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">리뷰 많은 순</option>\n");
      out.write("	  <option value=\"wishes\" ");
      out.print( "wishes".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">찜 많은 순</option>\n");
      out.write("	  <option value=\"year-asc\" ");
      out.print( "year-asc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">개봉연도 오래된 순</option>\n");
      out.write("	  <option value=\"year-desc\" ");
      out.print( "year-desc".equals(request.getParameter("sort")) ? "selected" : "" );
      out.write(">개봉연도 최신 순</option>\n");
      out.write("	</select>\n");
      out.write("	  <input type=\"hidden\" name=\"title\" value=\"");
      out.print(request.getParameter("title") != null ? request.getParameter("title") : "" );
      out.write("\">\n");
      out.write("	  <input type=\"hidden\" name=\"director\" value=\"");
      out.print(request.getParameter("director") != null ? request.getParameter("director") : "" );
      out.write("\">\n");
      out.write("	  <input type=\"hidden\" name=\"genreNo\" value=\"");
      out.print(genreNo != 0 ? genreNo : "" );
      out.write("\">\n");
      out.write("		<input type=\"hidden\" name=\"year\" value=\"");
      out.print(year != 0 ? year : "" );
      out.write("\">\n");
      out.write("		<input type=\"hidden\" name=\"star\" value=\"");
      out.print(star != 0 ? star : "" );
      out.write("\">\n");
      out.write("	  <input type=\"hidden\" name=\"rating\" value=\"");
      out.print(request.getParameter("rating") != null ? request.getParameter("rating") : "" );
      out.write("\">\n");
      out.write("	  <input type=\"hidden\" name=\"page\" value=\"1\">\n");
      out.write("	  \n");
      out.write("	</form>\n");
      out.write("\n");
      out.write("    <table class=\"table table-hover align-middle\">\n");
      out.write("      <thead class=\"table-light\">\n");
      out.write("        <tr >\n");
      out.write("          <th scope=\"col\" style=\"width: 2%;\">포스터</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 10%;\">제목</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 7%;\">개봉연도</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 5%;\">국가</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 15%;\">장르</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 10%;\">감독</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 7%;\">상영시간</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 7%;\">상영등급</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 7%;\">평균 별점</th>\n");
      out.write("          <th scope=\"col\" style=\"width: 7%;\">찜 수</th>\n");
      out.write("        </tr>\n");
      out.write("      </thead>\n");
      out.write("      <tbody>\n");
 
   for (Movie movie : movies) {
      List<Genre> genres = movieGenreMapMapper.getGenresByMovieNo(movie.getNo());

      out.write("\n");
      out.write("        <tr class=\"movie-row\">\n");
      out.write("          <td><a href=\"movie-detail.jsp?movieNo=");
      out.print(movie.getNo() );
      out.write("\"><img src=\"../../resources/images/movie/");
      out.print(movie.getPosterImagePath() );
      out.write("\" alt=\"포스터\" class=\"movie-poster\"></a></td>\n");
      out.write("          <td><a href=\"movie-detail.jsp?movieNo=");
      out.print(movie.getNo() );
      out.write('"');
      out.write('>');
      out.print(movie.getTitle() );
      out.write("</a></td>\n");
      out.write("          <td>");
      out.print(movie.getReleaseYear() );
      out.write(" 년</td>\n");
      out.write("          <td>");
      out.print(movie.getCountry() );
      out.write("</td>\n");
      out.write("          <td>\n");
      out.write("          ");

                for (Genre genre : genres) {
          
      out.write("   \n");
      out.write("                ");
      out.print(genre.getName() );
      out.write("\n");
      out.write("          ");

                   }
          
      out.write(" \n");
      out.write("          </td>\n");
      out.write("          <td>");
      out.print(movie.getDirector() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print(movie.getLength() );
      out.write(" 분</td>\n");
      out.write("          <td>");
      out.print(movie.getRating() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print(String.format("%.1f", movie.getAvgStar()) );
      out.write('점');
      out.write(' ');
      out.write('(');
      out.print(movie.getReviewCnt() );
      out.write("명)</td>\n");
      out.write("          <td>");
      out.print(movie.getWishCnt() );
      out.write("</td>\n");
      out.write("        </tr>\n");

   }

      out.write("        \n");
      out.write("      </tbody>\n");
      out.write("    </table>\n");
 
	if (pagination.getTotalPages() > 0) { 

      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"d-flex justify-content-center mt-4\">\n");

	//검색조건 및 정렬 파라미터 유지
	String queryParams = "";
		if (title != null) queryParams += "&title=" + title;
		if (director != null) queryParams += "&director=" + director;
		if (rating != null) queryParams += "&rating=" + rating;
		if (genreNo != 0) queryParams += "&genreNo=" + genreNo;
		if (year != 0) queryParams += "&year=" + year;
		if (star != 0) queryParams += "&star=" + star;
		if (sort != null) queryParams += "&sort=" + sort;
	//이전 버튼
	if (!pagination.isFirst()) {

      out.write("\n");
      out.write("	  <a href=\"movie-list.jsp?page=");
      out.print(pagination.getPrevPage());
      out.print(queryParams);
      out.write("\" class=\"btn btn-outline-secondary me-2\">이전</a>\n");

	}
	
	// 페이지 번호들
	for (int i = pagination.getBeginPage(); i <= pagination.getEndPage(); i++) {

      out.write("\n");
      out.write("	  <a href=\"movie-list.jsp?page=");
      out.print(i);
      out.print(queryParams);
      out.write("\"\n");
      out.write("	     class=\"btn btn-outline-secondary me-2 ");
      out.print( i == pagination.getCurrentPage() ? "active" : "" );
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a>\n");

	}
	
	// 다음 버튼
	if (!pagination.isLast()) {

      out.write("\n");
      out.write("	  <a href=\"movie-list.jsp?page=");
      out.print(pagination.getNextPage());
      out.print(queryParams);
      out.write("\" class=\"btn btn-outline-secondary me-2\">다음</a>\n");

	}

      out.write("\n");
      out.write("</div>\n");
 
	} else {

      out.write("\n");
      out.write("	<div class=\"text-center my-5\">\n");
      out.write("    <p class=\"text-muted fs-5\">검색 결과가 없습니다.</p>\n");
      out.write("  </div>\n");
      out.write("	\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	}

      out.write("\n");
      out.write("  </div>\n");
      out.write("\n");
      out.write("  <!-- Bootstrap JS -->\n");
      out.write("  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("</body>\n");
      out.write("   ");
      out.write("\n");
      out.write("\n");
      out.write("<footer class=\"footer\">\n");
      out.write("	<div class=\"footer-wrapper\">\n");
      out.write("		<div class=\"footer-top\">\n");
      out.write("			<p class=\"rating-info\">\n");
      out.write("				지금까지 <span class=\"rating-count\">★737,166,391</span> 개의 평가가 쌓였어요.\n");
      out.write("			</p>\n");
      out.write("			<div class=\"language-select\">\n");
      out.write("				<select>\n");
      out.write("					<option>한국어</option>\n");
      out.write("				</select>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-links\">\n");
      out.write("			<a href=\"#\">서비스 이용약관</a> <span>|</span> <a href=\"#\"><strong>개인정보\n");
      out.write("					처리방침</strong></a> <span>|</span> <a href=\"#\">회사 안내</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-contact\">\n");
      out.write("			<p>고객센터 | cs@movmov.com, 02-000-0000</p>\n");
      out.write("			<p>광고 문의 | ad-sales@movmov.com / 최신 광고 소개서</p>\n");
      out.write("			<p>\n");
      out.write("				제휴 및 대외 협력 | <a href=\"https://movmov.team/contact\" target=\"_blank\">https://movmov.team/contact</a>\n");
      out.write("			</p>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-company\">\n");
      out.write("			<p>주식회사 뭅뭅 | 대표 이응수 | 서울 종로구 율곡로10길 105 디아망 4층</p>\n");
      out.write("			<p>사업자 등록 번호 211-210-61239</p>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<div class=\"footer-bottom\">\n");
      out.write("			<span class=\"copyright\"> © Copy Right MovMov 2025 Inc. All\n");
      out.write("				rights reserved.</span>\n");
      out.write("			<div class=\"footer-socials\">\n");
      out.write("				<span><i class=\"fa-brands fa-facebook\"></i></span> <span><i\n");
      out.write("					class=\"fa-brands fa-x-twitter\"></i></span> <span><i\n");
      out.write("					class=\"fa-brands fa-instagram\"></i></span>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</footer>");
      out.write("\n");
      out.write("</html>\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
