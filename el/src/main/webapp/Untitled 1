MVC 패턴
- 애플리케이션을 Model, View, Controller로 나누어서 개발하는 방식
- 역할
	Model
		- 뷰에서 표현할 데이터 그 자체
		- 뷰에서 표현할 데이터를 획득하기 위해서 수행하는 모든 작업 및 그 결과물
		- 업무로직 수행(데이터의 상태를 변경-추가/변경/삭제/조회)

	View
		- 모델의 데이터를 표현하는 것
	Controller
		- 클라이언트(사용자)와 상호작용을 담당하는 것

Model1 개별방식과 Model2 개발방식
- Model1 개발방식
	- JSP 기반의 웹 애플리케이션 개발방식이다.
- Model2 개발방식
	- 웹 애플리케이션 개발에 MVC 패턴을 적용해서 개발하는 방식이다.

EL(Expression Language)
- EL은 표현언어다.
- EL은 JSP에서 자바 코드없이 데이터를 표현하거나 연산을 수행할 수 있도록 지원하는 표현식이다.
- JSP 2.0부터 도입되었다. 별도의 라이브러리 없이 즉시 사용할 수 있다.
- 기능
	+ JSP의 내장객체의 데이터를 표현할 수 있다.
		- 요청파라미터
		- 속성
		- 초기화파라미터
		- 쿠키
		- 해더정보
	+ 자바빈즈의 프로퍼티값을 표현할 수 있다.
	+ 콜렉션객체의 값을 표현할 수 있다.
	+ 사칙연산, 비교연산, 논리연산, 기타 연산 작업을 수행할 수 있다.
	* 지원하지 않는 기능
		- 변수 선언, 변수에 값 할당
		- 제어문(if문 흉내)
		- 반복문(for문 흉내)
		* JSTL을 사용하면 위의 작업도 가능하다.
	
- 형식
	${표현식}
	
	요청파라미터값(무조건 String 값이다.) 표현
		${param 파라미터이름 }
	
	속성값(기본자료형값, String 값, 자바빈즈, 배열, 콜렉션, 맵) 표현
		${속성이름}
		
		1. 기본자료형값을 속성으로 저장했을 때
			${속성명 }
			x.setAttribute("age", 10);					-> ${age }
			x.setAttribute("discountRate", 0.15);		-> ${discountRate }
			
		2. String 값을 속성으로 저장했을 때
			${속성명 }
			x.setAttribute("name", "홍길동");				-> ${name }
			x.setAttribute("tel", "010-1111-1111");		-> ${tel }
			
		3. 자바빈즈를 속성으로 저장했을 때
			${속성명.프로퍼티 }
			Book book = new Book();
			book.setTitle("이것이 자바다");
			book.setAuthor("신용권");
			book.setPrice(25000);
			x.setAttribute("book", book);				-> ${book.title }
														-> ${book.author }
														-> ${book.price }
		4. Map 객체를 속성으로 저장했을 때
			${속성명.키}
			Map<String, String> info = new HashMap<>();
			info.put("name", "1조");
			info.put("subject", "도서 대여 시스템");
			info.put("members", "홍길동, 강감찬, 이순신");
			info.put("language", "java");
			x.setAttribute("project", info);			-> ${project.name }
														-> ${project.subject }
														-> ${project.members }
														-> ${project.language }
		
		5. 배열객체 혹은 콜렉션객체(List)를 속성으로 저장했을 때
			${속성명[index]}
			
			String[] arr = {"김유신", "이순신", "강감찬"};
			x.setAttribute("names", arr);				-> ${names[0]}
														-> ${names[1]}
														-> ${names[2]}
														
			List<String list = new ArrayList<>();
			list.add("소설");
			list.add("인문");
			list.add("IT");
			list.add("외국어");
			x.setAttribute("categories", list);			-> ${categories[0] }
														-> ${categories[1] }
														-> ${categories[2] }
														-> ${categories[3] }

Redirect와 Forward
1. Redirect 이동
	- 클라이언트에게 재요청 URL을 응답으로 보내고, 클라이언트가 요청을 새로 보낸다.
	- 클라이언트가 새로 이동할 JSP 경로를 알고 있다.
	- 브라우저의 주소창이 새로 이동할 JSP 경로로 변한다.
	- 언제 사용하는가?
		+ 처음 요청(추가/변경/삭제)을 클리어한 다음 새 요청을 할 때 사용한다.
			(처음 요청시 생성되었던 요청객체/응답객체를 파괴하는 것이 목적이다.)
2. Forward 이동
	- 서버내부에서 다른 JSP로 이동한다.
	- 클라이언트가 새로 이동할 JSP 경로를 알지 못한다.
	- 브라우저의 주소창이 변경되지 않고, 최초 요청한 JSP 경로로 유지된다.
	- 언제 사용하는가?
		+ 처음 요청(뷰에서 표현할 데이터를 요청객체에 담았다.)을 보존시킨 채로 다음 요청을 할 때 사용한다.
			(처음 요청시 생성되었던 요청객체/응답객체를 보존하는 것이 목적이다.)  
	
	

		