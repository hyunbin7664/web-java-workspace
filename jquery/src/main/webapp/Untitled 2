   
   
   // 선택된 엘리먼트이서 click, dbclick 이벤트 발생시 실행할 이벤트핸들러 등록
   $(선택자).on('click dbclick', function() {...});
   
   // 선택된 엘리먼트에서 click 이벤트 발생시 실행할 이벤트핸들러 등록
   // 				 dbclick 이벤트 발생시 실행할 이벤트핸들러 등록
   $(선택자).on({
   		"click":function() { ... }, 
   		"dbclick":function() { ... }
   	});
   	
   	// 컨테이너 안에 존재하거나 미래에 추가되는 엘리먼트에 이벤트핸들러 등록
   	$("컨테이너").on("click", "선택자", function() { ... })
   	
   	-----------------------------------------------------------------
   	<p>내용</p>
   	
   	조회하기
   	let content = $("p").text()
   	변경하기$("p").text("변경할 내용");
   	
   	-----------------------------------------------------------------
   	Ajax(Asynchronous JavaScript And XML)
   	- 자바스크립트와 XML을 이용한 서버와의 비동기통신방식
   	
   	-----------------------------------------------------------------
   	
   	JSON(JavaScript Object Notation)
   	- JSON은 경량의 DATA-교환 형식이다.
   	- JSON은 사람이 읽고 쓰기 쉽다.
   	- JSON은 기계가 분석하고 생성하기 쉽다.
   	- JSON은 프로그래밍 언어로부터 완벽하게 독립적이다.
   	  (모든 프로그래밍 언어에서 JSON을 분석하고 생성하는 것이 가능하다.)
   	- JSON은 이상적인 DATA-교환 언어로 만들고 있다.
   	
   	  
   	- 주의사항
   		- JSON형식으로 작성된 데이터는 텍스트 데이터다.
   	  	  (절대로 객체나 배열이 아니다.)
   	  	- JSON에서 string은 반드시 큰따옴표로 감싼다.
   	  	- JSON은 주석을 사용할 수 없다.
   	  	- JSON은 오직 하나의 루트요소만 가진다.
   	
   	- 활용
   		- 컴퓨터간의 통신에서 데이터를 주고받을 때 JSON 형식의 데이터를 
   		
   	
   	- 구조
   	  + object 구조
   	  	- name/value 쌍들의 비순서화된 집합이다.
   	  	- {로 시작하고 }로 끝난다.
   	  	- name과 value는 :로 구분한다.
   	  	- name/value 각 쌍들은 , 로 구분한다.
   	  	- name은 string만 가능하다.
   	  	- value는 string, number, object, arrar, true, false, null이 가능하다.
   	  	- 예시)
   	  		{"name":"홍길동", "age":40, "married":true, "car":null}
   	  		{"name":"홍길동", "car":{"name":"제네시스", "price":80000000, "year":2023}}
   	  		{"dept":"영업부", "members":["홍길동", "김유신", "강감찬"]}
   	  + object 구조
   	  	- value들의 순서화된 리스트다.
   	  	- [로 시작하고 ]로 끝난다.
   	  	- 각각의 value들은 , 로 구분한다.
   	  	- value는 string, number, object, arrar, true, false, null이 가능하다.
   		- 예시)
   			["김유신", "강감찬", "이순신"]
   			{"id":100, "name":"김유신", "dept":"영업부", "salary": 400}, 
   			{"id":102, "name":"강감찬", "dept":"영업부", "salary": 300}, 
   			{"id":104, "name":"정재현", "dept":"영업부", "salary": 500}]
   	
   	XML(eXtensible Markup Language)과 JSON
   	- XML은 확장가능한 마크업언어다.
   	  (확장가능한 이란 의미는 용도에 맞게 마크업(태그)를 확장할 수 있다.)
   	- XML은 DATA-교환 형식이다.
   	- XML은 프로그래밍 언어로부터 완벽하게 독립적이다ㅏ.
   	- JSON이 등장하기 전에는 XML이 DATA-교환 형식으로 사용되었다.
   	- 예시
   		XML
   			<?xml version="1.0" encoding="UTF-8" ?>
   			<employees>
   				<id>100</id>
   				<name>홍길동</name>
   				<dept>영업부</dept>
   				<salary>450</salary>
   			</employees>
   		JSON
   			{"id":100, "name":"홍길동", "dept":"영업부", "salary":450}
   	
   	* JSON의 장점
   		- JSON은 같은 데이터를 표현할 때 XML 보다 짧다.
   		- JSON은 닫는 태그가 필요없다.
   		- JSON의 값은 조회하면 값의 타입에 맞게 조회된다.
   		- JSON은 JSON 형식의 데이터에서 값을 쉽게 조회할 수 있다.
   		
   	Javascript의 JSON객체
   		- JSON객체는 Javascript에서 JSON형식의 데이터를 분석하고 생성하기 위한
   		  API를 제공하는 객체다.
   		- 주요 API
   			JSON.parse()
   			- JSON형식의 데이터를 분석하는 메소드다.
   			- 인자로 전달받은 텍스트를 분석해서 Javascript 객체나 배열로 변환해서 반환한다.
   			- JSON형식텍스트(object 구조) ---->  javascript의 객체
   			- JSON형식텍스트(array 구조) ----> javascript의 배열
   			JSON.stringify()
   			- JSON형식의 데이터를 생성하는 메소드다.
   			- 인자로 전달받은 객체 혹은 배열을 JSON형식의 텍스트로 변환해서 반환한다.
   			- javascript의 객체 ---->  JSON형식텍스트(object 구조)
   			- javascript의 배열 ----> JSON형식텍스트(array 구조)
   			
   		
   	
   	
   	
   	
   	