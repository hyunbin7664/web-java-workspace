<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="kr.co.movmov.mapper.PostMapper">
	<!--
		void insertPost(Post post);
	-->
	<insert id="insertPost" parameterType="Post">
		INSERT INTO movmov_community_posts
		(post_no
		 , user_id
	  	 , post_header
	 	 , post_board_type
	   	 , post_title
	     , post_content
	     , post_is_spoiler
	     , post_created_date
	     , post_updated_date)
		VALUES
		(POST_NO_SEQ.NEXTVAL
		 , #{user.id}
		 , #{header.id}
		 , #{boardType.id}
		 , #{title}
		 , #{content}
		 , #{isSpoiler}
		 , #{createdDate}
		 , #{updatedDate}
		 )
	</insert>
	
	<!--
		Post getPostByNo(int postNo);
	-->
	<select id="getPostByNo" resultMap="PostResultMap">
		select
			P.post_no
		  , P.post_title
		  , P.post_content
		  , P.user_id
		  , P.post_created_date
		  , P.post_updated_date
		  , P.post_view_count	
		  , P.post_upvote_count
		  , P.post_comment_count
		  , P.post_is_spoiler
		  , P.post_is_deleted
		  , P.post_is_reported
		  , P.post_report_count
		  , U.user_nickname				as user_nickname
		  , HC.cat_id					as header_cat_id
		  , HC.cat_name					as header_cat_name
    	  , BC.cat_id					as board_cat_id
    	  , BC.cat_name					as board_cat_name
		from movmov_community_posts P
			join movmov_content_categories HC on P.post_header = HC.cat_id
			join movmov_content_categories BC on P.post_board_type = BC.cat_id
			join movmov_users U on P.user_id = U.user_id
		where
			P.post_no = #{postNo}
	</select>
	
	<!--
		List<Post> getRecentPostsByBoardId(int boardId);
	-->
	<select id="getRecentPostsByBoardId" resultMap="PostResultMap">
		select
			P.post_no
		  , P.post_title
		  , P.post_content
		  , P.user_id
		  , P.post_created_date
		  , P.post_updated_date
		  , P.post_view_count	
		  , P.post_upvote_count
		  , P.post_comment_count
		  , P.post_is_spoiler
		  , U.user_nickname				as user_nickname
		  , HC.cat_id					as header_cat_id
		  , HC.cat_name					as header_cat_name
    	  , BC.cat_id					as board_cat_id
    	  , BC.cat_name					as board_cat_name
		from movmov_community_posts P
			join movmov_content_categories HC on P.post_header = HC.cat_id
			join movmov_content_categories BC on P.post_board_type = BC.cat_id
			join movmov_users U on P.user_id = U.user_id
		where
			P.post_board_type = #{boardId}
			AND P.post_is_deleted = 'N'
			<![CDATA[AND P.post_report_count < 5]]>
		order by
			P.post_no desc
		fetch first 5 rows only
	</select>
	
	<resultMap type="Post" id="PostResultMap">
		<id column="post_no" property="no"/>
		<result column="post_title" property="title"/>
		<result column="post_content" property="content"/>
		<result column="post_created_date" property="createdDate"/>
		<result column="post_updated_date" property="updatedDate"/>
		<result column="post_view_count" property="viewCount"/>
		<result column="post_upvote_count" property="upvoteCount"/>
		<result column="post_comment_count" property="commentCount" />
		<result column="post_is_spoiler" property="isSpoiler"/>
		<result column="post_is_deleted" property="isDeleted"/>
		<result column="post_is_reported" property="isReported"/>
		<result column="post_report_count" property="reportCount"/>
		<association property="user" javaType="User">
			<id column="user_id" property="id"/>
			<result column="user_nickname" property="nickname"/>
		</association>
		<association property="header" javaType="Category">
			<id column="header_cat_id" property="id"/>
			<result column="header_cat_name" property="name"/>
		</association>
		<association property="boardType" javaType="Category">
			<id column="board_cat_id" property="id"/>
			<result column="board_cat_name" property="name"/>
		</association>
	</resultMap>
	
	<!--
		void updatePost(Post post);
	-->
	<insert id="updatePost" parameterType="Post">
		UPDATE movmov_community_posts
		SET
			post_content = #{content}
		  , post_header = #{header.id}
		  , post_board_type = #{boardType.id}
		  , post_updated_date = #{updatedDate}
		  , post_is_spoiler = #{isSpoiler}
		  , post_is_deleted = #{isDeleted}
		  , post_is_reported = #{isReported}
		  , post_report_count = #{reportCount}
		WHERE
			post_no = #{no}
	</insert>
	
	<!--
		int getCurrentPostNo();
	-->
	<select id="getCurrentPostNo">
		select POST_NO_SEQ.CURRVAL
		from dual
	</select>
	
	<!--
		int getTotalRows(Map<String, Object> condition);
		condition 값:
			{boardId:게시판번호,
				spoiler:스포일러유무,
				header:말머리번호,
				searchFilter:제목/작성자,}
				- boardId: 선택 (커뮤니티 메인에서 모두 조회한 후 페이지에서 분류)
				- spoiler: 선택
				- header: 선택
	-->
	<select id="getTotalRows">
		SELECT
			COUNT(*)
		FROM
			MOVMOV_COMMUNITY_POSTS P
			JOIN MOVMOV_USERS U ON P.USER_ID = U.USER_ID
		WHERE
			P.post_is_deleted = 'N'
			<![CDATA[AND P.post_report_count < 5]]>
			<if test="boardId != null">
				AND P.post_board_type = #{boardId}
			</if>
			<if test="spoiler != null">
				AND P.post_is_spoiler = #{spoiler}
			</if>
			<if test="header != null">
				AND P.post_header = #{header}
			</if>
			<if test="searchFilter != null">
				AND (
					LOWER(P.post_content) LIKE '%' || LOWER(#{searchFilter}) || '%'
				OR LOWER(P.post_title) LIKE '%' || LOWER(#{searchFilter}) || '%'
			 	OR LOWER(U.user_nickname) LIKE '%' || LOWER(#{searchFilter}) || '%'
				)
			</if>
	</select>
	
	<!--
		List<Post> getPosts(Map<String, Object> condition);
		
		condition 값:
			{boardId:게시판번호,
				spoiler:스포일러유무,
				header:말머리번호,
				searchFilter:제목/작성자,
				offset:오프셋값,
				rows:행개수,
				sort:정렬기준}
				- boardId: 선택 (커뮤니티 메인에서 모두 조회한 후 페이지에서 분류)
				- spoiler: 선택
				- header: 선택
				- sort: 선택
	-->
	<select id="getPosts" parameterType="map" resultMap="PostResultMap">
		SELECT
			P.post_no
		  , P.post_title
		  , P.post_content
		  , P.user_id
		  , P.post_created_date
		  , P.post_updated_date
		  , P.post_view_count	
		  , P.post_upvote_count
		  , P.post_comment_count
		  , P.post_is_spoiler
		  , U.user_nickname				as user_nickname
		  , HC.cat_id					as header_cat_id
		  , HC.cat_name					as header_cat_name
    	  , BC.cat_id					as board_cat_id
    	  , BC.cat_name					as board_cat_name
		FROM movmov_community_posts P
			join movmov_content_categories HC on P.post_header = HC.cat_id
			join movmov_content_categories BC on P.post_board_type = BC.cat_id
			join movmov_users U on P.user_id = U.user_id
		WHERE
			P.post_is_deleted = 'N'
			<![CDATA[AND P.post_report_count < 5]]>
		<if test="boardId != null">
			AND P.post_board_type = #{boardId}
		</if>
		<if test="spoiler != null">
			AND P.post_is_spoiler = #{spoiler}
		</if>
		<if test="header != null">
			AND P.post_header in #{header}
		</if>
		<if test="searchFilter != null">
			AND (
				LOWER(P.post_content) LIKE '%' || LOWER(#{searchFilter}) || '%'
			 OR LOWER(P.post_title) LIKE '%' || LOWER(#{searchFilter}) || '%'
			 OR LOWER(U.user_nickname) LIKE '%' || LOWER(#{searchFilter}) || '%'
			)
		</if>
		<if test="userId != null">
		and P.user_id = #{userId}
		</if>
		order by
		<choose>
			<when test="sort == 'newest'">
				P.post_no desc
			</when>
			<when test="sort == 'oldest'">
				P.post_no asc
			</when>
			<when test="sort == 'views'">
				P.post_view_count desc
			</when>
			<otherwise>
				P.post_no desc
			</otherwise>
		</choose>
		<if test="offset != null">
			offset #{offset} rows
		</if>
		fetch next #{rows} rows only
	</select>
	
	<!--
		List<String> getUpvoteIds(int postNo);
	-->
	<select id="getUpvoteIds">
		SELECT user_id
		FROM movmov_community_upvotes
		WHERE post_no = #{postNo}
	</select>
	
	<!--
		void updatePostViewCount(int postNo);
	-->
	<update id="updatePostViewCount">
		UPDATE movmov_community_posts
		SET post_view_count = post_view_count + 1
		WHERE post_no = #{postNo}
	</update>
	
	<!--
		void updatePostUpvoteCount(int postNo);
	-->
	<update id="updatePostUpvoteCount">
		UPDATE movmov_community_posts P
		SET post_upvote_count = (
			SELECT COUNT(*)
			FROM movmov_community_upvotes U
			WHERE U.post_no = P.post_no
		)
		WHERE post_no = #{postNo}
	</update>
	
	<!--
		void insertUpvote(Map<String, Object> info);
		info
			postNo: (값/0) 게시글 아이디
			commentNo (값/0) 댓글 아이디
			userId (not null) 유저 아이디
	-->
	<insert id="insertUpvote" parameterType="map">
		insert into movmov_community_upvotes
		(post_no, comment_no, user_id)
		values
		(
		<choose>
			<when test="postNo != 0">
				#{postNo}, null,
			</when>
			<when test="commentNo != 0">
				null, #{commentNo},
			</when>
		</choose>
		#{userId}
		)
	</insert>
	
	<!--
		int getUpvoteCount(int postNo);
	-->
	<select id="getUpvoteCount">
		SELECT post_upvote_count
		FROM movmov_community_posts
		WHERE post_no = #{postNo}
	</select>
	
	<!--
		void updatePostCommentCount(int postNo);
	-->
	<update id="updatePostCommentCount">
		UPDATE movmov_community_posts P
		SET post_comment_count = (
			SELECT COUNT(*)
			FROM movmov_community_comments C
			WHERE C.post_no = P.post_no
			AND C.COMMENT_IS_DELETED = 'N'
			<![CDATA[AND C.COMMENT_REPORT_COUNT < 5]]>
		)
		WHERE post_no = #{postNo}
	</update>
	
	<!--
		void setPostCommentCount(@Param("postNo") int postNo,
							@Param("commentCount") int commentCount);
	-->
	<update id="setPostCommentCount">
		UPDATE MOVMOV_COMMUNITY_POSTS P
		SET post_comment_count = #{commentCount}
		WHERE post_no = #{postNo}
	</update>
	
	<select id="getRecentPostsByUserId" resultMap="PostResultMap">
		SELECT 
		    p.POST_NO               AS post_no,
		    p.POST_TITLE            AS post_title,
		    p.POST_CONTENT          AS post_content,
		    p.POST_CREATED_DATE     AS post_created_date,
		    p.POST_UPDATED_DATE     AS post_updated_date,
		    p.POST_VIEW_COUNT       AS post_view_count,
		    p.POST_COMMENT_COUNT    AS post_comment_count,
		    p.POST_UPVOTE_COUNT     AS post_upvote_count,         
		    p.POST_IS_SPOILER       AS post_is_spoiler,           
		    p.USER_ID               AS user_id,
		    U.USER_NICKNAME         AS user_nickname,
		    HC.CAT_ID               AS header_cat_id,
		    HC.CAT_NAME             AS header_cat_name,
		    BC.CAT_ID               AS board_cat_id,
		    BC.CAT_NAME             AS board_cat_name
		FROM movmov_community_posts P
			JOIN movmov_content_categories HC ON P.post_header = HC.cat_id
			JOIN movmov_content_categories BC ON P.post_board_type = BC.cat_id
			JOIN movmov_users U ON P.user_id = U.user_id
		WHERE p.user_id = #{id}
		ORDER BY p.post_created_date DESC
		FETCH FIRST 10 ROWS ONLY
	</select>
	
	<select id="getTotalPostRowsByUserId" parameterType="string" resultType="int">
    	SELECT COUNT(*)
    	FROM movmov_community_posts
    	WHERE user_id = #{userId}
		AND post_is_deleted = 'N'
		<![CDATA[AND post_report_count < 5]]>
   </select>
   
	<!--
		void updatePostReportCount(int postNo);
	-->
   <update id="updatePostReportCount">
	   	UPDATE MOVMOV_COMMUNITY_POSTS
	   	SET post_report_count = (
	   		SELECT COUNT(*)
	   		FROM MOVMOV_COMMUNITY_REPORTS
	   		WHERE report_content_no = #{postNo}
	   		)
	   	  , post_is_reported = 'Y'
	   	WHERE
	   		post_no = #{postNo}
   </update>
	
</mapper>
 